You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.






class Solution {
    public int maxProfit(int[] prices) {
        
        int n = prices.length;
        
        if(n == 0)
            return 0;
        
        int[] left = new int[n];
        
        int leftMin = prices[0];
        
        left[0] = 0;
        
        for(int i=1;i<n;i++)
        {
            left[i] = Math.max(left[i-1],prices[i] - leftMin);
            leftMin = Math.min(prices[i],leftMin);
        }
        
        
        int[] right = new int[n];
        
        int rightMax = prices[n-1];
        
        right[n-1] = 0;
        
        for(int i=n-2;i>=0;i--)
        {
            right[i] = Math.max(right[i+1],rightMax - prices[i]);
            rightMax = Math.max(rightMax, prices[i]);
        }
        
        int profit = right[0];
        
        for(int i=1;i<n;i++)
        {
            profit = Math.max(profit, left[i-1] + right[i]);
        }
        
        
        return profit;
        
    }
}
