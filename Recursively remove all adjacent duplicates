Given a string s, recursively remove adjacent duplicate characters from the string s. The output string should not have any adjacent duplicates.
 

Input:
The first line of input contains an integer T, denoting the no of test cases. Then T test cases follow. Each test case contains a string str.

Output:
For each test case, print a new line containing the resulting string.

Constraints:
1<=T<=100
1<=Length of string<=50

Example:
Input:
2
geeksforgeek
acaaabbbacdddd

Output:
gksforgk
acac





/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    
    
    private static String removeAdjacent(String str)
    {
        
        String temp = str;
        
        str = str + '0';
        
        int i = 0;
        
        String ss = "";
        
        while(i < str.length() - 1)
        {
            
            if(str.charAt(i) != str.charAt(i+1))
            {
                ss = ss + str.charAt(i);
                i++;
            }
            if(i < str.length() - 1 && str.charAt(i) == str.charAt(i+1))
            {
                while(i < str.length() - 1 && str.charAt(i) == str.charAt(i+1))
                    i++;
                i++;
                
            }
            
            
        }
        
        if(temp.equals(ss))
            return temp;
        else
            return removeAdjacent(ss);
    }
    
    
    
	public static void main (String[] args) {
		//code
		
		Scanner sc = new Scanner(System.in);
		
		int t = sc.nextInt();
		
		for(int i=1;i<=t;i++)
		{
		    String str = sc.next();
		    
		    str = removeAdjacent(str);
		    
		    System.out.println(str);
		}
		
	}
}
