Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node.

Example 1:

Input:
      1
   /    \
  2      3
Output: 2 1 3




Solution:-


class Solution
{
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root)
    {
        // add your code
        
        class Pair
        {
            Node node;
            int height;
            
            Pair(Node node,int height)
            {
                this.node = node;
                this.height = height;
                
            }
        }
        if(root == null)
            return new ArrayList<Integer>();
        
        ArrayList<Integer> list = new ArrayList<>();
        
        LinkedList<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root,0));
        
        TreeMap<Integer,Integer> map = new TreeMap<>();
        
        
        while(!queue.isEmpty())
        {
            Pair pair = queue.removeFirst();
            
            if(!map.containsKey(pair.height))
            {
               map.put(pair.height,pair.node.data); 
            }
            
            if(pair.node.left != null)
                queue.add(new Pair(pair.node.left,pair.height - 1));
            if(pair.node.right != null)
                queue.add(new Pair(pair.node.right,pair.height + 1));
            
        }
        
        for(Integer key : map.keySet())
        {
            Integer value = map.get(key);
            list.add(value);
        }
        
        return list;
    }
}
