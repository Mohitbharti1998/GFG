Given a binary tree, print the bottom view from left to right.
A node is included in bottom view if it can be seen when we look at the tree from bottom.

                      20
                    /    \
                  8       22
                /   \        \
              5      3       25
                    /   \      
                  10    14

For the above tree, the bottom view is 5 10 3 14 25.
If there are multiple bottom-most nodes for a horizontal distance from root, then print the later one in level traversal. For example, in the below diagram, 3 and 4 are both the bottommost nodes at horizontal distance 0, we need to print 4.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree the output should be 5 10 4 14 25.


Solution:- 


class Tree
{
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        
        if(root == null)
            return new ArrayList<Integer>();
        
        class Pair
        {
            
            Node node;
            int height;
            
            Pair(Node node,int height)
            {
                this.node = node;
                this.height = height;
            }
        }
        
        ArrayList<Integer> list = new ArrayList<>();
        
        LinkedList<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root,0));
        
        TreeMap<Integer,Integer> map = new TreeMap<>();
        
        while(!queue.isEmpty())
        {
            Pair pair = queue.removeFirst();
            
            map.put(pair.height,pair.node.data);
            
            if(pair.node.left != null)
                queue.addLast(new Pair(pair.node.left,pair.height - 1));
            if(pair.node.right != null)
                queue.addLast(new Pair(pair.node.right,pair.height + 1));
            
            
        }
        
        for(Integer key : map.keySet())
        {
            Integer value = map.get(key);
            list.add(value);
        }
        
        
        return list;
        
    }
}
