Given a Binary Tree, find the vertical traversal of it starting from the leftmost level to the rightmost level.
If there are multiple nodes passing through a vertical line, then they should be printed as they appear in level order traversal of the tree.

Example 1:

Input:
           1
         /   \
       2       3
     /   \   /   \
   4      5 6      7
              \      \
               8      9           
Output: 
4 2 1 5 6 3 8 7 9 


Solution:- 

class Solution
{
    //Function to find the vertical order traversal of Binary Tree.
    static ArrayList <Integer> verticalOrder(Node root)
    {
        // add your code here
        class Pair
        {
            Node node;
            int height;
            
            Pair(Node node,int height)
            {
                this.node = node;
                this.height = height;
                
            }
        }
        if(root == null)
            return new ArrayList<Integer>();
        
        ArrayList<Integer> list = new ArrayList<>();
        
        LinkedList<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root,0));
        
        TreeMap<Integer,ArrayList<Integer>> map = new TreeMap<>();
        
        
        
        
        while(!queue.isEmpty())
        {
            Pair pair = queue.removeFirst();
            
            ArrayList<Integer> valueArray = map.get(pair.height);
            
            if(valueArray == null)
                valueArray = new ArrayList<>();
                
            
            valueArray.add(pair.node.data);   
            
            
            map.put(pair.height,valueArray); 
            
            
            if(pair.node.left != null)
                queue.add(new Pair(pair.node.left,pair.height - 1));
            if(pair.node.right != null)
                queue.add(new Pair(pair.node.right,pair.height + 1));
            
        }
        
        for(Integer key : map.keySet())
        {
            ArrayList<Integer> value = map.get(key);
            list.addAll(value);
        }
        
        return list;
    }
}
