Given a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.

Example 1:

Input:
    2
 /    \
1      3
Output: 1 
Explanation: 
The left subtree of root node contains node 
with key lesser than the root node’s key and 
the right subtree of root node contains node 
with key greater than the root node’s key.
Hence, the tree is a BST.


Solution:- 

public class Solution
{
    //Function to check whether a Binary Tree is BST or not.
    boolean isBST(Node root)
    {
        // code here.
        return isBST(root,Integer.MIN_VALUE,Integer.MAX_VALUE);
    }
    
    boolean isBST(Node root,int min,int max)
    {
        if(root == null)
            return true;
        if(root.data >= max || root.data <= min)
            return false;
        boolean check1 = isBST(root.left,min,root.data);
        if(check1 == false)
            return false;
        boolean check2 = isBST(root.right,root.data,max);
        if(check2 == false)
            return false;
            
        return true;
    }
}
